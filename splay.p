; Splay tree class.

(class SplayNode ()
  key val left right)

(method SplayNode .init (:key key val left right)
  (&right! (&left! (&val! (&key! self key) val) left) right))

(method SplayNode .rotl ()
  (let (p (&left self))
    (&left! self (&right p))
    (&right! p self)
    p))

(method SplayNode .rotr ()
  (let (p (&right self))
    (&right! self (&left p))
    (&left! p self)
    p))

(method SplayNode .rotll ()
  (let (p (&left self) q (&left p))
    (&left! p (&right q))
    (&right! q self)
    q))

(method SplayNode .rotrr ()
  (let (p (&right self) q (&right p))
    (&right! p (&left q))
    (&left! q self)
    q))

(method SplayNode .rotlr ()
  (let (p (&left self) q (&right p))
    (&right! p (&left q))
    (&left! q p)
    (&left! self (&right q))
    (&right! q self)
    q))

(method SplayNode .rotrl ()
  (let (p (&right self) q (&left p))
    (&left! p (&right q))
    (&right! q p)
    (&right! self (&left q))
    (&left! q self)
    q))

(class Splay ()
  top sentinel comparator)

(method Splay .init (:opt (comparator (lambda (k1 k2)
                                        (- (address k1) (address k2)))))
  (let (node (.new SplayNode))
    (&top! self node)
    (&sentinel! self node)
    (&comparator! self comparator)))

(method Splay -barance (key)
  (let (top (&top self) sentinel (&sentinel self) cmp (&comparator self)
            p top q nil d nil)
    (&right! (&left! (&key! sentinel key) sentinel) sentinel)
    (while (not (zero? (<- d (cmp (&key p) key))))
      (if (< d 0)
          (begin (<- q (&left p))
                 (if (zero? (<- d (cmp (&key q) key)))
                     (begin (<- p (.rotl p)) (break))
                     (<- p (if (< d 0) (.rotll p) (.rotlr p)))))
          (begin (<- q (&right p))
                 (if (zero? (<- d (cmp (&key q) key)))
                     (begin (<- p (.rotr p)) (break))
                     (<- p (if (> d 0) (.rotrr p) (.rotrl p)))))))
    (&top! self p)
    p))

(method Splay -resume ()
  (let (top (&top self) left (&left top) right (&right top)
            sentinel (&sentinel self))
    (if (eq? left sentinel) (&top! self right)
        (eq? right sentinel) (&top! self left)
        (let (p left)
          (while (different? (&right p) sentinel)
            (<- p (&right p)))
          (&right! p right)
          (&top! self left))))
  nil)

(method Splay .get (key)
  (let (top (-barance self key) sentinel (&sentinel self))
    (if (eq? top sentinel) (-resume self)
        (&val top))))

(method Splay .put (key val)
  (let (top (-barance self key) sentinel (&sentinel self))
    (if (eq? top sentinel)
        (&top! self (.init (.new SplayNode)
                           :key key
                           :val val
                           :left (&left sentinel)
                           :right (&right sentinel)))
        (&val! top val))
    self))

(function main ()
  (let (splay (.init (.new Splay)))
    (.put (.put (.put splay :one 1) :two 2) :three 3)
    (assert (= (.get splay :one) 1))
    (assert (= (.get splay :one) 1))
    (assert (= (.get splay :two) 2))
    (assert (= (.get splay :one) 1))
    (assert (= (.get splay :two) 2))
    (assert (= (.get splay :three) 3))))
