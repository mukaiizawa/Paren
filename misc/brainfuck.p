; Brainfuck interpreter.

(function interpret (code)
  (let (pc 0 cp 0 cells (bytes 30000) cs nil)
    (while (< pc (len code))
      (let (op (chr ([] code pc)))
        (<- pc (++ pc))
        (if (= op ">") (<- cp (++ cp))
            (= op "<") (<- cp (-- cp))
            (= op "+") ([] cells cp (++ ([] cells cp)))
            (= op "-") ([] cells cp (-- ([] cells cp)))
            (= op ".") (write-byte ([] cells cp))
            (= op ",") ([] cells cp (read-byte))
            (= op "[")
            (if (!= ([] cells cp) 0) (push! (-- pc) cs)
                (let (depth 0)
                  (while true
                    (<- op (chr ([] code pc))
                        pc (++ pc))
                    (if (= op "[") (<- depth (++ depth))
                        (= op "]") (if (= depth 0) (break)
                                       (<- depth (-- depth)))))))
            (= op "]")
            (if (nil? cs) (raise SyntaxError "missing close bracket")
                (<- pc (pop! cs))))))))

(function load-program (file)
  (with-open ($in file :read)
    (return (read-bytes))))

(function! main (args)
  (if (nil? args) (raise ArgumentError "required souce file")
      (interpret (load-program (car args)))))
