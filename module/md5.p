; md5 module.

(import :bin)

(macro md5.apply (fn a b c d x s ac)
  `(<- ,a (i32 (+ ,a (i32 (,fn ,b ,c ,d)) ,x ,ac))
       ,a (i32 (i32rotl ,a ,s))
       ,a (i32 (+ ,a ,b))))

(function md5.next (X A B C D)
  (let ((a b c d) (list A B C D)
                  S11 7 S12 12 S13 17 S14 22
                  S21 5 S22 9  S23 14 S24 20
                  S31 4 S32 11 S33 16 S34 23
                  S41 6 S42 10 S43 15 S44 21
                  F (f (x y z) (| (& x y) (& (~ x) z)))
                  G (f (x y z) (| (& x z) (& y (~ z))))
                  H (f (x y z) (^ x y z))
                  I (f (x y z) (^ y (| x (~ z)))))
    ;; round1
    (md5.apply F a b c d ([] X  0) S11 0xd76aa478)
    (md5.apply F d a b c ([] X  1) S12 0xe8c7b756)
    (md5.apply F c d a b ([] X  2) S13 0x242070db)
    (md5.apply F b c d a ([] X  3) S14 0xc1bdceee)
    (md5.apply F a b c d ([] X  4) S11 0xf57c0faf)
    (md5.apply F d a b c ([] X  5) S12 0x4787c62a)
    (md5.apply F c d a b ([] X  6) S13 0xa8304613)
    (md5.apply F b c d a ([] X  7) S14 0xfd469501)
    (md5.apply F a b c d ([] X  8) S11 0x698098d8)
    (md5.apply F d a b c ([] X  9) S12 0x8b44f7af)
    (md5.apply F c d a b ([] X 10) S13 0xffff5bb1)
    (md5.apply F b c d a ([] X 11) S14 0x895cd7be)
    (md5.apply F a b c d ([] X 12) S11 0x6b901122)
    (md5.apply F d a b c ([] X 13) S12 0xfd987193)
    (md5.apply F c d a b ([] X 14) S13 0xa679438e)
    (md5.apply F b c d a ([] X 15) S14 0x49b40821)
    ;; round2
    (md5.apply G a b c d ([] X  1) S21 0xf61e2562)
    (md5.apply G d a b c ([] X  6) S22 0xc040b340)
    (md5.apply G c d a b ([] X 11) S23 0x265e5a51)
    (md5.apply G b c d a ([] X  0) S24 0xe9b6c7aa)
    (md5.apply G a b c d ([] X  5) S21 0xd62f105d)
    (md5.apply G d a b c ([] X 10) S22 0x02441453)
    (md5.apply G c d a b ([] X 15) S23 0xd8a1e681)
    (md5.apply G b c d a ([] X  4) S24 0xe7d3fbc8)
    (md5.apply G a b c d ([] X  9) S21 0x21e1cde6)
    (md5.apply G d a b c ([] X 14) S22 0xc33707d6)
    (md5.apply G c d a b ([] X  3) S23 0xf4d50d87)
    (md5.apply G b c d a ([] X  8) S24 0x455a14ed)
    (md5.apply G a b c d ([] X 13) S21 0xa9e3e905)
    (md5.apply G d a b c ([] X  2) S22 0xfcefa3f8)
    (md5.apply G c d a b ([] X  7) S23 0x676f02d9)
    (md5.apply G b c d a ([] X 12) S24 0x8d2a4c8a)
    ;; round3
    (md5.apply H a b c d ([] X  5) S31 0xfffa3942)
    (md5.apply H d a b c ([] X  8) S32 0x8771f681)
    (md5.apply H c d a b ([] X 11) S33 0x6d9d6122)
    (md5.apply H b c d a ([] X 14) S34 0xfde5380c)
    (md5.apply H a b c d ([] X  1) S31 0xa4beea44)
    (md5.apply H d a b c ([] X  4) S32 0x4bdecfa9)
    (md5.apply H c d a b ([] X  7) S33 0xf6bb4b60)
    (md5.apply H b c d a ([] X 10) S34 0xbebfbc70)
    (md5.apply H a b c d ([] X 13) S31 0x289b7ec6)
    (md5.apply H d a b c ([] X  0) S32 0xeaa127fa)
    (md5.apply H c d a b ([] X  3) S33 0xd4ef3085)
    (md5.apply H b c d a ([] X  6) S34 0x04881d05)
    (md5.apply H a b c d ([] X  9) S31 0xd9d4d039)
    (md5.apply H d a b c ([] X 12) S32 0xe6db99e5)
    (md5.apply H c d a b ([] X 15) S33 0x1fa27cf8)
    (md5.apply H b c d a ([] X  2) S34 0xc4ac5665)
    ;; round4
    (md5.apply I a b c d ([] X  0) S41 0xf4292244)
    (md5.apply I d a b c ([] X  7) S42 0x432aff97)
    (md5.apply I c d a b ([] X 14) S43 0xab9423a7)
    (md5.apply I b c d a ([] X  5) S44 0xfc93a039)
    (md5.apply I a b c d ([] X 12) S41 0x655b59c3)
    (md5.apply I d a b c ([] X  3) S42 0x8f0ccc92)
    (md5.apply I c d a b ([] X 10) S43 0xffeff47d)
    (md5.apply I b c d a ([] X  1) S44 0x85845dd1)
    (md5.apply I a b c d ([] X  8) S41 0x6fa87e4f)
    (md5.apply I d a b c ([] X 15) S42 0xfe2ce6e0)
    (md5.apply I c d a b ([] X  6) S43 0xa3014314)
    (md5.apply I b c d a ([] X 13) S44 0x4e0811a1)
    (md5.apply I a b c d ([] X  4) S41 0xf7537e82)
    (md5.apply I d a b c ([] X 11) S42 0xbd3af235)
    (md5.apply I c d a b ([] X  2) S43 0x2ad7d2bb)
    (md5.apply I b c d a ([] X  9) S44 0xeb86d391)
    (list (+ A a) (+ B b) (+ C c) (+ D d))))

(function md5.X (n msg msglen padding)
  (let (X (array 16))
    (dotimes (i 16) ([] X i 0))
    (for (i (<< n 6) j 0) (< j 64) (i (++ i) j (++ j))
      ([] X (>> j 2) (| (<< (if (< i msglen) ([] msg i)
                                ([] padding (- i msglen))) 24)
                        (>> ([] X (>> j 2)) 8))))
    X))

(function md5.sum (msg)
  ; MD5 hash algorithm as defined in RFC 1321.
  ; Returns the MD5 checksum of the data.
  (let ((A B C D) '(0x67452301 0xefcdab89 0x98badcfe 0x10325476)
                  msglen (memlen msg)
                  N (++ (>> (+ msglen 8) 6))
                  padlen (- (<< N 6) msglen)
                  padding (bytes padlen)
                  msglen-bits (<< msglen 3)
                  md5sum (bytes 16))
    ([] padding 0 0x80)
    (dotimes (i 8)
      ([] padding (+ (- padlen 8) i) (& 0xff msglen-bits))
      (<- msglen-bits (>> msglen-bits 8)))
    (dotimes (n N)
      (<- (A B C D) (md5.next (md5.X n msg msglen padding) A B C D)))
    (dotimes (i 4)
      (let (x (nth i (list A B C D)))
        ([] md5sum (+ (* i 4) 0) (& x 0xff))
        ([] md5sum (+ (* i 4) 1) (& (>> x 8) 0xff))
        ([] md5sum (+ (* i 4) 2) (& (>> x 16) 0xff))
        ([] md5sum (+ (* i 4) 3) (& (>> x 24) 0xff))))
    md5sum))

(function! main (args)
  (assert (= (hexstr (md5.sum "")) "d41d8cd98f00b204e9800998ecf8427e"))
  (assert (= (hexstr (md5.sum "a")) "0cc175b9c0f1b6a831c399e269772661"))
  (assert (= (hexstr (md5.sum "abc")) "900150983cd24fb0d6963f7d28e17f72"))
  (assert (= (hexstr (md5.sum "message digest")) "f96b697d7cb7938d525a2f31aaf161d0"))
  (assert (= (hexstr (md5.sum "abcdefghijklmnopqrstuvwxyz")) "c3fcd3d76192e4007dfb496cca67e13b"))
  (assert (= (hexstr (md5.sum "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")) "d174ab98d277d9f5a5611c2c9f419d9f"))
  (assert (= (hexstr (md5.sum "12345678901234567890123456789012345678901234567890123456789012345678901234567890")) "57edf4a22be3c955ac49da2e2107b67a")))
