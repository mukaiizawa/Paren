; md5 module.

(<- $md5.ABCD '(0x67452301 0xefcdab89 0x98badcfe 0x10325476))

(function md5.int32 (x)
  (& 0xffffffff x))

(macro F (x y z) `(md5.int32 (| (& ,x ,y) (& (~ ,x) ,z))))
(macro G (x y z) `(md5.int32 (| (& ,x ,z) (& ,y (~ ,z)))))
(macro H (x y z) `(md5.int32 (^ ,x ,y ,z)))
(macro I (x y z) `(md5.int32 (^ ,y (| ,x (~ ,z)))))

(macro FF (a b c d x s ac)
  `(<- ,a (md5.int32 (+ ,a (F ,b ,c ,d) ,x ,ac))
       ,a (md5.int32 (rot-left ,a ,s))
       ,a (md5.int32 (+ ,a ,b))))

(macro GG (a b c d x s ac)
  `(<- ,a (md5.int32 (+ ,a (G ,b ,c ,d) ,x ,ac))
       ,a (md5.int32 (rot-left ,a ,s))
       ,a (md5.int32 (+ ,a ,b))))

(macro HH (a b c d x s ac)
  `(<- ,a (md5.int32 (+ ,a (H ,b ,c ,d) ,x ,ac))
       ,a (md5.int32 (rot-left ,a ,s))
       ,a (md5.int32 (+ ,a ,b))))

(macro II (a b c d x s ac)
  `(<- ,a (md5.int32 (+ ,a (I ,b ,c ,d) ,x ,ac))
       ,a (md5.int32 (rot-left ,a ,s))
       ,a (md5.int32 (+ ,a ,b))))

(function hexint (i)
  (int->str i :radix 16))

(function hexstr (data)
  (with-memory-stream ($out)
    (dotimes (i (memlen data))
      (write-mem (int->str ([] data i) :radix 16 :padding 2)))))

(function rot-left (val count)
  (md5.int32 (| (<< val count) (>> val (- 32 count)))))

(function int-arr (size)
  (let (a (array size))
    (dotimes (i size) ([] a i 0))
    a))

(function md5.transform-block (x a0 b0 c0 d0)
  (let ((a b c d) (list a0 b0 c0 d0)
                  S11 7 S12 12 S13 17 S14 22
                  S21 5 S22 9  S23 14 S24 20
                  S31 4 S32 11 S33 16 S34 23
                  S41 6 S42 10 S43 15 S44 21)
    ;; round1
    (FF a b c d ([] x  0) S11 0xd76aa478)
    (FF d a b c ([] x  1) S12 0xe8c7b756)
    (FF c d a b ([] x  2) S13 0x242070db)
    (FF b c d a ([] x  3) S14 0xc1bdceee)
    (FF a b c d ([] x  4) S11 0xf57c0faf)
    (FF d a b c ([] x  5) S12 0x4787c62a)
    (FF c d a b ([] x  6) S13 0xa8304613)
    (FF b c d a ([] x  7) S14 0xfd469501)
    (FF a b c d ([] x  8) S11 0x698098d8)
    (FF d a b c ([] x  9) S12 0x8b44f7af)
    (FF c d a b ([] x 10) S13 0xffff5bb1)
    (FF b c d a ([] x 11) S14 0x895cd7be)
    (FF a b c d ([] x 12) S11 0x6b901122)
    (FF d a b c ([] x 13) S12 0xfd987193)
    (FF c d a b ([] x 14) S13 0xa679438e)
    (FF b c d a ([] x 15) S14 0x49b40821)
    ;; round2
    (GG a b c d ([] x  1) S21 0xf61e2562)
    (GG d a b c ([] x  6) S22 0xc040b340)
    (GG c d a b ([] x 11) S23 0x265e5a51)
    (GG b c d a ([] x  0) S24 0xe9b6c7aa)
    (GG a b c d ([] x  5) S21 0xd62f105d)
    (GG d a b c ([] x 10) S22 0x02441453)
    (GG c d a b ([] x 15) S23 0xd8a1e681)
    (GG b c d a ([] x  4) S24 0xe7d3fbc8)
    (GG a b c d ([] x  9) S21 0x21e1cde6)
    (GG d a b c ([] x 14) S22 0xc33707d6)
    (GG c d a b ([] x  3) S23 0xf4d50d87)
    (GG b c d a ([] x  8) S24 0x455a14ed)
    (GG a b c d ([] x 13) S21 0xa9e3e905)
    (GG d a b c ([] x  2) S22 0xfcefa3f8)
    (GG c d a b ([] x  7) S23 0x676f02d9)
    (GG b c d a ([] x 12) S24 0x8d2a4c8a)
    ;; round3
    (HH a b c d ([] x  5) S31 0xfffa3942)
    (HH d a b c ([] x  8) S32 0x8771f681)
    (HH c d a b ([] x 11) S33 0x6d9d6122)
    (HH b c d a ([] x 14) S34 0xfde5380c)
    (HH a b c d ([] x  1) S31 0xa4beea44)
    (HH d a b c ([] x  4) S32 0x4bdecfa9)
    (HH c d a b ([] x  7) S33 0xf6bb4b60)
    (HH b c d a ([] x 10) S34 0xbebfbc70)
    (HH a b c d ([] x 13) S31 0x289b7ec6)
    (HH d a b c ([] x  0) S32 0xeaa127fa)
    (HH c d a b ([] x  3) S33 0xd4ef3085)
    (HH b c d a ([] x  6) S34 0x04881d05)
    (HH a b c d ([] x  9) S31 0xd9d4d039)
    (HH d a b c ([] x 12) S32 0xe6db99e5)
    (HH c d a b ([] x 15) S33 0x1fa27cf8)
    (HH b c d a ([] x  2) S34 0xc4ac5665)
    ;; round4
    (II a b c d ([] x  0) S41 0xf4292244)
    (II d a b c ([] x  7) S42 0x432aff97)
    (II c d a b ([] x 14) S43 0xab9423a7)
    (II b c d a ([] x  5) S44 0xfc93a039)
    (II a b c d ([] x 12) S41 0x655b59c3)
    (II d a b c ([] x  3) S42 0x8f0ccc92)
    (II c d a b ([] x 10) S43 0xffeff47d)
    (II b c d a ([] x  1) S44 0x85845dd1)
    (II a b c d ([] x  8) S41 0x6fa87e4f)
    (II d a b c ([] x 15) S42 0xfe2ce6e0)
    (II c d a b ([] x  6) S43 0xa3014314)
    (II b c d a ([] x 13) S44 0x4e0811a1)
    (II a b c d ([] x  4) S41 0xf7537e82)
    (II d a b c ([] x 11) S42 0xbd3af235)
    (II c d a b ([] x  2) S43 0x2ad7d2bb)
    (II b c d a ([] x  9) S44 0xeb86d391)
    (list (+ a0 a) (+ b0 b) (+ c0 c) (+ d0 d))))

(function md5sum (message)
  ; MD5 hash algorithm as defined in RFC 1321.
  ; Returns the MD5 checksum of the data.
  (let ((a b c d) $md5.ABCD
                  messagelen (memlen message)
                  block-count (++ (>> (+ messagelen 8) 6))
                  paddinglen (- (<< block-count 6) messagelen)
                  padding (bytes paddinglen)
                  messagelen-bits (<< messagelen 3)
                  md5sum (bytes 16)
                  count 0)
    ;; Step 1. Append Padding Bits
    ([] padding 0 0x80)
    ;; Step 2. Append Length
    (dotimes (i 8)
      ([] padding (+ (- paddinglen 8) i) (& 0xff messagelen-bits))
      (<- messagelen-bits (>> messagelen-bits 8)))
    ;; Step 3. Initialize MD Buffer
    ;; see below
    ;; Step 4. Process Message in 16-Word Blocks
    (dotimes (i block-count)
      (let (block (int-arr 16) index (& 0xffffffff (<< i 6)))
        (for (j 0) (< j 64) (j (++ j) index (& 0xffffffff (++ index)))
          ([] block (>> j 2) (md5.int32 (| (<< (if (< index messagelen) ([] message index)
                                                   ([] padding (- index messagelen))) 24)
                                           (>> ([] block (>> j 2)) 8)))))
        (<- (a b c d) (md5.transform-block block a b c d))))
    ;; Step 5. Output
    (dotimes (i 4)
      (let (n (if (= i 0) a (= i 1) b (= i 2) c d))
        (dotimes (j 4)
          ([] md5sum count (& 0xff n))
          (<- n (>> n 8)
              count (++ count)))))
    md5sum))

(function! main (args)
  (assert (= (hexstr (md5sum "")) "d41d8cd98f00b204e9800998ecf8427e"))
  (assert (= (hexstr (md5sum "a")) "0cc175b9c0f1b6a831c399e269772661"))
  (assert (= (hexstr (md5sum "abc")) "900150983cd24fb0d6963f7d28e17f72"))
  (assert (= (hexstr (md5sum "message digest")) "f96b697d7cb7938d525a2f31aaf161d0"))
  (assert (= (hexstr (md5sum "abcdefghijklmnopqrstuvwxyz")) "c3fcd3d76192e4007dfb496cca67e13b"))
  (assert (= (hexstr (md5sum "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")) "d174ab98d277d9f5a5611c2c9f419d9f"))
  (assert (= (hexstr (md5sum "12345678901234567890123456789012345678901234567890123456789012345678901234567890")) "57edf4a22be3c955ac49da2e2107b67a")))
