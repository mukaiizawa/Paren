; calendar.

(import :datetime)
(import :optparse)

(function print-month (dt)
  (let (dw (.day-week dt))
    (printf "%d-%02d\n" (.year dt) (.month dt))
    (println "Su Mo Tu We Th Fr Sa")
    (dotimes (i (* dw 3)) (print " "))
    (dotimes (i (.days-in-month dt))
      (printf "%2d%s" (++ i) (if (= (<- dw (% (++ dw) 7)) 0) "\n" " ")))
    (if (!= dw 0) (println))))

(function cal (y m size)
  (if (= size 1) (print-month (datetime y m 1))
      (while (> size 0)
        (let (lines-list nil size (min size 3))
          (dotimes (i size)
            (push! (split
                     (with-memory-stream ($out)
                       (print-month (datetime y m 1)))
                     "\n")
                   lines-list)
            (if (!= m 12) (<- m (++ m))
                (<- y (++ y) m 1)))
          (dolist (lines (apply zip (reverse! lines-list)))
            (dolist (line lines)
              (printf "%-22s" (|| line "")))
            (println)))
        (<- size (- size 3)))))

(function! main (args)
  (let ((op args) (.parse (.init (.new OptionParser) "aA:n:t") args) now (datetime.now)
                  y (.year now) m (.month now) size 1)
    (if (.get op "a") (<- m 1 size 12)
        (.get op "A") (<- y (.get-int op "A") m 1 size 12)
        (let (argc (len args))
          (if (= argc 1) (<- m (int (car args)))
              (= argc 2) (<- (y m) (map int args)))
          (if (.get op "n") (<- size (.get-int op "n"))
              (.get op "t") (begin
                              (<- size 3)
                              (if (= m 1) (<- y (-- y) m 12)
                                  (<- m (-- m)))))))
    (cal y m size)))
