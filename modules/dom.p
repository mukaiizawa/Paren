; DOM module.

(class DOM.SelectorCompiler ()
  reader)

(method DOM.SelectorCompiler .init ()
  (<- self->reader (.new AheadReader))
  self)

(method DOM.SelectorCompiler .parse-selector0 ()
  (let (selectors nil next nil
                  lead-selector? (f (rd) (in? (.next rd) '("#" "." "[")))
                  read-ident (f (rd)
                               (while (.next? rd alnum?)
                                 (.get rd))
                               (.token rd)))
    (if (! (lead-selector? self->reader)) (push! `(:name ,(read-ident self->reader)) selectors))
    (while (lead-selector? self->reader)
      (<- next (.skip self->reader))
      (push!
        (if (= next "#") `(:id ,(read-ident self->reader))
            (= next ".") `(:class ,(read-ident self->reader))
            (= next "[") (let (name (read-ident self->reader) next (.skip self->reader)
                                    read-val (f (rd)
                                               (let (ch (.skip rd))
                                                 (if (! (in? ch '("'" "\""))) (raise Error "missing attribute value quote")
                                                     (begin
                                                       (while (!= (.next rd) ch)
                                                         (.get rd))
                                                       (.skip rd ch)
                                                       (.skip self->reader "]")
                                                       (.token rd))))))
                           (if (= next "]") `(:attr ,name)
                               (= next "=") `(:attr= ,(list name (read-val self->reader)))
                               (in? next '("~" "|" "^" "$" "*")) (let (ope (keyword (str "attr" next (.skip self->reader "="))))
                                                                   `(,ope ,(list name (read-val self->reader))))
                               (raise Error "unexpected attribute selector"))))
        selectors))
    (apply concat (reverse! selectors))))

(method DOM.SelectorCompiler .parse-selector ()
  (let (selector (list (.parse-selector0 self)) next nil)
    (while (<- next (.next (.skip-space self->reader)))
      (if (= next ",") (break)
          (= next ">") (begin (.skip self->reader) (push! :child-combinator selector))
          (= next "~") (begin (.skip self->reader) (push! :general-sibling-combinator selector))
          (= next "+") (begin (.skip self->reader) (push! :adjacent-sibling-combinator selector))
          (push! :descendant-combinator selector))
      (.skip-space self->reader)
      (push! (.parse-selector0 self) selector))
    (reverse! selector)))

(method DOM.SelectorCompiler .compile ()
  (let (selectors nil)
    (push! (.parse-selector self) selectors)
    (while (= (.next (.skip-space self->reader)) ",")
      (.skip self->reader)
      (.skip-space self->reader)
      (push! (.parse-selector self) selectors))
    (reverse! selectors)))

(function dom.compile-selector (selector)
  (with-memory-stream ($in selector)
    (.compile (.new DOM.SelectorCompiler))))

(function dom.name (element)
  (lower (string (car element))))

(function dom.attributes (element)
  (keep (f (x) (if (keyword? x) (string x)))
        (cadr element)))

(function dom.attribute (element attr)
  (cadr (member (keyword attr) (cadr element))))

(function dom.id (element)
  (dom.attribute element :id))

(function dom.classes (element)
  (split (dom.attribute element :class) " "))

(function dom.children (element)
  (cddr element))

(function dom.get-element-by-id (dom id)
  (dom.query-selector dom (str "#" id)))

(function dom.get-element-by-name (dom name)
  (dom.query-selector dom name))

(function dom.query-selector (dom selector)
  (car (dom.query-selector dom selector)))

(function dom.query-selector-all (dom selector)
  (let (selectors (dom.compile-selector selector)
                  match? (f (dom selector)
                           (if (! (every? (f (x)
                                            (let ((matcher args) x)
                                              (if (== matcher :name) (= args (dom.name dom))
                                                  (== matcher :id) (= args (dom.id dom))
                                                  (== matcher :class) (in? args (dom.classes dom))
                                                  (== matcher :attr) (in? args (dom.attributes dom))
                                                  (== matcher :attr=) (= (dom.attribute dom (car args)) (cadr args))
                                                  (== matcher :attr^=) (prefix? (dom.attribute dom (car args)) (cadr args))
                                                  (== matcher :attr$=) (suffix? (dom.attribute dom (car args)) (cadr args))
                                                  (raise NotImplementedError))))
                                          (group (car selector) 2))) nil
                               (nil? (cdr selector)) true
                               (let (combinator (cadr selector))
                                 (if (== combinator :descendant-combinator) (some? (f (x) (walk x (cddr selector))) (dom.children dom))
                                     (== combinator :child-combinator) (some? (f (x) (match? x (cddr selector))) (dom.children dom))
                                     (raise NotImplementedError)))))
                  walk (f (dom selector)
                         (if (nil? dom) nil
                             (string? dom) nil    ; text node
                             (let (elements (apply concat
                                                   (map (f (x) (walk x selector))
                                                        (dom.children dom))))
                               (if (match? dom selector) (cons dom elements)
                                   elements)))))
    (apply concat (map (partial walk dom) selectors))))

(function! main (args)
  (let (dom '(div (:id "container" :class "v")
                  (p (:class "x y z") "text")
                  (input (:type "text"))))
    (assert (= (dom.id dom) "container"))
    (assert (= (dom.name dom) "div"))
    (assert (= (dom.attributes dom) '("id" "class")))
    (assert (= (dom.classes (car (dom.children dom))) '("x" "y" "z")))
    (assert (= (dom.attribute (cadr (dom.children dom)) "type") "text")))
  ;; compiler.
  (assert (= (dom.compile-selector "input")
             '(((:name "input")))))
  (assert (= (dom.compile-selector "#id")
             '(((:id "id")))))
  (assert (= (dom.compile-selector ".small")
             '(((:class "small")))))
  (assert (= (dom.compile-selector "[title]")
             '(((:attr "title")))))
  (assert (= (dom.compile-selector "[title='foo']")
             '(((:attr= ("title" "foo"))))))
  (assert (= (dom.compile-selector "[title|='foo']")
             '(((:attr|= ("title" "foo"))))))
  (assert (= (dom.compile-selector "input.small")
             '(((:name "input" :class "small")))))
  (assert (= (dom.compile-selector ".red.blue")
             '(((:class "red" :class "blue")))))
  (assert (= (dom.compile-selector "img.xxx[src^='https']")
             '(((:name "img" :class "xxx" :attr^= ("src" "https"))))))
  (assert (= (dom.compile-selector "div p")
             '(((:name "div") :descendant-combinator (:name "p")))))
  (assert (= (dom.compile-selector "ul > li")
             '(((:name "ul") :child-combinator (:name "li")))))
  (assert (= (dom.compile-selector "img + p")
             '(((:name "img") :adjacent-sibling-combinator (:name "p")))))
  (assert (= (dom.compile-selector "a.a #id > .cls")
             '(((:name "a" :class "a") :descendant-combinator (:id "id") :child-combinator (:class "cls")))))
  (assert (= (dom.compile-selector "a, .b, #c, [d='e']")
             '(((:name "a"))
               ((:class "b"))
               ((:id "c"))
               ((:attr= ("d" "e"))))))
  (assert (= (dom.compile-selector "ol > li[class$='xxx'], ul > li.yyy")
             '(((:name "ol") :child-combinator (:name "li" :attr$= ("class" "xxx")))
               ((:name "ul") :child-combinator (:name "li" :class "yyy")))))
  (assert (= (dom.compile-selector "a.cls, b > c.cls")
             '(((:name "a" :class "cls"))
               ((:name "b") :child-combinator (:name "c" :class "cls")))))
  ;; query-selector.
  (assert (= (dom.query-selector-all '(a () (a () (a ()))) "a")
             '((a () (a () (a ())))
               (a () (a ()))
               (a ()))))
  (assert (= (dom.query-selector-all '(div () (a ()) (a ()) (a ())) "a")
             '((a ()) (a ()) (a ()))))
  (assert (= (dom.query-selector-all '(a () (a () (a ()))) "a a")
             '((a () (a () (a ())))
               (a () (a ())))))
  (assert (= (dom.query-selector-all '(a () (a () (a ()))) "a a a")
             '((a () (a () (a ())))))))

