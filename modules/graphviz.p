; graphviz module.

(function graphviz.parse-opt (expr)
  ;; ((T png) (o "foo.png")) -> "-Tpng -ofoo.png"
  (join (map (f (x) (apply str (cons "-" x)))
             expr)
        " "))

(function graphviz.write-option (expr)
  (let ((key val) expr)
    (printf "%s=%v;\n" (string key) val)))

(function graphviz.write-options (expr)
  (when expr
    (write-line " [")
    (foreach graphviz.write-option expr)
    (write-bytes "]")))

(function graphviz.write-node (expr)
  (let ((id :rest options) expr)
    (write-bytes id)
    (graphviz.write-options options)
    (write-line ";")))

(function graphviz.write-edge (expr)
  ;; (src dst attr...)
  ;; ((x y z) attr...) <=> (x y attr...) and (y z attr...)
  ;; (src (dst1 dst2 ...)) <=> (src dst1 attr...) and (src dst2 attr...) ...
  (if (atom? (car expr)) (let ((src dst :rest attrs) expr)
                           (if (atom? dst) (graphviz.write-edge (cons (list (car expr) (cadr expr)) (cddr expr)))
                               (foreach (f (x) (graphviz.write-edge (cons src (cons x attrs))))
                                        dst)))
      (let ((nodes :rest options) expr)
        (write-bytes (join nodes "->"))
        (graphviz.write-options options)
        (write-line ";"))))

(function graphviz.write-subgraph (expr)
  (let ((:key id nodes edges subgraphs) expr)
    (graphviz.write-graph 'subgraph (list :id id :nodes nodes :edges edges :subgraphs subgraphs))))

(function graphviz.write-graph (kind expr)
  (let ((:key id nodes edges subgraphs) expr)
    (if (! (in? kind '(graph digraph subgraph))) (raise SyntaxError "invalid graph kind")
        (begin
          (write-bytes kind)
          (if id (print " " id))
          (write-line " {")
          (foreach graphviz.write-node nodes)
          (foreach graphviz.write-edge edges)
          (foreach graphviz.write-subgraph subgraphs)
          (write-line "}")))))

(function graphviz.dot (:key id configures nodes edges subgraphs options dry-run?)
  (let (dot (with-memory-stream ($out)
              (graphviz.write-graph 'digraph (list :id id :nodes nodes :edges edges :subgraphs subgraphs))))
    (if (nil? dry-run?) (with-process ($out (str "dot " (graphviz.parse-opt options)) :write)
                          (write-bytes dot))
        (write-bytes dot))))

(function! main (args)
  ;; write-edge
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '(x y)))
             "x->y;\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '(x y (k1 v1))))
             "x->y [\nk1=v1;\n];\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '(x y (k1 v1) (k2 v2))))
             "x->y [\nk1=v1;\nk2=v2;\n];\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '(x (a b c))))
             "x->a;\nx->b;\nx->c;\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '(x (a b c) (k1 v1))))
             "x->a [\nk1=v1;\n];\nx->b [\nk1=v1;\n];\nx->c [\nk1=v1;\n];\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '(x (a b c) (k1 v1) (k2 v2))))
             "x->a [\nk1=v1;\nk2=v2;\n];\nx->b [\nk1=v1;\nk2=v2;\n];\nx->c [\nk1=v1;\nk2=v2;\n];\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '((x y z))))
             "x->y->z;\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '((x y z) (k1 v1))))
             "x->y->z [\nk1=v1;\n];\n"))
  (assert (= (with-memory-stream ($out)
               (graphviz.write-edge '((x y z) (k1 v1) (k2 v2))))
             "x->y->z [\nk1=v1;\nk2=v2;\n];\n")))
